
	/**
	 * 流程启动
	 * @param alias 启动流程的标识
	 * @param users 启动节点任务处理人，如果为null，则使用流程配置中的处理人信息
	 * @param ywlsh 业务流水号
	 * @param sblsh 申办流水号
	 * @param caccount 提交人账号
	 * @param cname 提交人姓名
	 * @param piDay 时限天数
	 * @param isWorkDay 时限天数类型(false日历日,true工作日)
	 * @param tenable 当前流程实例是否有效（false不启用，true启用），false：保存未提交的情况
	 * @return 流程实例ID
	 */
	public String saveStart(String alias, String users, String ywlsh, String sblsh, String caccount, String cname, int piDay, boolean isWorkDay, boolean tenable);

	/**
	 * 流程启动并返回开始节点待办信息
	 * @param alias 启动流程的标识
	 * @param users 启动节点任务处理人，如果为null，则使用流程配置中的处理人信息
	 * @param ywlsh 业务流水号
	 * @param sblsh 申办流水号
	 * @param caccount 提交人账号
	 * @param cname 提交人姓名
	 * @param piDay 时限天数
	 * @param isWorkDay 时限天数类型(false日历日,true工作日)
	 * @param tenable 当前流程实例是否有效（false不启用，true启用），false：保存未提交的情况
	 * @return 流程实例的start待办信息或null
	 */
	public IFlowWaiting saveFlowStart(String alias, String users, String ywlsh, String sblsh, String caccount, String cname, int piDay, boolean isWorkDay, boolean tenable);
	
	/**
	 * 停止流程
	 * @param flowid 
	 * @param alias 启动流程的标识
	 * @param piid 流程实例
	 */
	public void saveStop(Long flowid, String alias, String piid);

	/**
	 * 流程处理
	 * @param waitid 待办事项ID
	 * @param nextTalias 下级任务列表，如果为null，处理当前任务后，会结束流程
	 * @param paccount 当前处理人账号
	 * @param pname 当前处理人姓名
	 * @param resultType 处理类型
	 * @param resultMsg 处理意见
	 * @return true|false
	 */
	public boolean saveProcess(long waitid, String[] nextTalias, String paccount, String pname, String resultType, String resultMsg, String datatable);

	/**
	 * 流程处理
	 * @param waitid 待办事项ID
	 * @param nextTalias 下级任务列表，如果为null，处理当前任务后，会结束流程
	 * @param nextTusers 下级任务处理人列表，如果为null，则使用流程配置中的处理人信息
	 * @param paccount 当前处理人账号
	 * @param pname 当前处理人姓名
	 * @param resultType 处理类型
	 * @param resultMsg 处理意见
	 * @return true|false
	 */
	public boolean saveProcess(long waitid, String[] nextTalias, String[] nextTusers, String paccount, String pname, String resultType, String resultMsg, String datatable);

	
	
	public List<IFlowWaiting> queryFlowWaiting(String account);
	public boolean updateFlowWaitingUser(long waitid, String user);
	public IFlowWaiting getFlowWaiting(long waitid);
	public Map<String, String> queryFlowTask(long flowid);
	public IFlow getFlowById(long flowid);
	public IFlowPi getFlowPiByPiid(String piid);
	public List<IFlowPi> queryFlowPi(String ywlsh);
	public List<IFlowPi> queryFlowPiBySblsh(String sblsh);
	public IFlowPi getFlowPi(String ywlsh);
	public IFlowPi getFlowPiBySblsh(String sblsh);
	public List<IFlowPiData> queryFlowPiData(String piid);
	public List<IFlowWaiting> queryFlowWaitingByPiid(String piid);
	public void deleteFlowPi(String id);
	public boolean updateFlowWaitingTenable(Long wid, String datatable);