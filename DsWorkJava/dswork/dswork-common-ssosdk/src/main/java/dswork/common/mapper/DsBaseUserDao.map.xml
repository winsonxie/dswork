<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC
	"-//ibatis.apache.org//DTD Mapper 3.0//EN" 
	"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="dswork.common.dao.DsBaseUserDao">

<insert id="insertUserBm" parameterType="dswork.common.model.IUserBm">
	insert into DS_BASE_USER_BM (BM, USERID, TYPE) values (#{bm}, #{userid}, #{type})
</insert>
<update id="updateUserBm" parameterType="dswork.common.model.IUserBm">
	update DS_BASE_USER_BM set USERID=<if test="userid==0">null</if><if test="0!=userid">#{userid}</if> where BM=#{bm}
</update>
<update id="updateUserMobile" parameterType="dswork.common.model.IUser">
	update DS_BASE_USER set MOBILE=#{mobile} where ID=#{id}
</update>
<resultMap id="resultUserBm" type="dswork.common.model.IUserBm">
	<id property="bm" column="BM" />
	<result property="userid" column="USERID" />
	<result property="type" column="TYPE" />
</resultMap>
<select id="getUserBm" resultMap="resultUserBm">
	select BM, USERID, TYPE from DS_BASE_USER_BM where BM=#{bm}
</select>

<insert id="insertUser" parameterType="dswork.common.model.IUser">
	insert into DS_BASE_USER
	(ID, STATUS, SSQY, NAME, MOBILE, ACCOUNT, PASSWORD, WORKCARD, SEX, AVATAR, IDCARD, EMAIL, PHONE, ORGPID, ORGID, TYPE, TYPENAME, EXALIAS, EXNAME, CREATETIME, LASTTIME)
	values
	(#{id}, #{status}, #{ssqy}, #{name}, #{mobile}, #{account}, #{password}, #{workcard}, #{sex}, #{avatar}, #{idcard}, #{email}, #{phone}, #{orgpid}, #{orgid}, #{type}, #{typename}, #{exalias}, #{exname}, #{createtime}, #{lasttime})
</insert>
<delete id="delete">
	delete from DS_BASE_USER where ID=#{id}
</delete>
<update id="updateUserPassword">
	update DS_BASE_USER set PASSWORD=#{password}, LASTTIME=LASTTIME+1 where ID=#{id}
</update>
<update id="updateUser" parameterType="dswork.common.model.IUser">
	update DS_BASE_USER set 
	<if test="@Ognl@isNotEmpty(ssqy)"> SSQY=#{ssqy}, </if>
	<if test="@Ognl@isNotEmpty(name)"> NAME=#{name}, </if>
	<if test="@Ognl@isNotEmpty(sex)"> SEX=#{sex}, </if>
	<if test="@Ognl@isNotEmpty(avatar)"> AVATAR=#{avatar}, </if>
	<if test="@Ognl@isNotEmpty(email)"> EMAIL=#{email}, </if>
	<if test="@Ognl@isNotEmpty(phone)"> PHONE=#{phone}, </if>
	LASTTIME=LASTTIME+1 where ID=#{id}
</update>
<update id="updateUserData" parameterType="dswork.common.model.IUser">
	update DS_BASE_USER set EXDATA=#{exdata}, LASTTIME=LASTTIME+1 where ID=#{id}
</update>
<resultMap id="resultUser" type="dswork.common.model.IUser">
	<id property="id" column="ID" />
	<result property="status" column="STATUS" />
	<result property="ssqy" column="SSQY" />
	<result property="name" column="NAME" />
	<result property="mobile" column="MOBILE" />
	<result property="account" column="ACCOUNT" />
	<result property="password" column="PASSWORD" />
	<result property="workcard" column="WORKCARD" />
	<result property="sex" column="SEX" />
	<result property="avatar" column="AVATAR" />
	<result property="idcard" column="IDCARD" />
	<result property="email" column="EMAIL" />
	<result property="phone" column="PHONE" />
	<result property="orgpid" column="ORGPID" />
	<result property="orgid" column="ORGID" />
	<result property="type" column="TYPE" />
	<result property="typename" column="TYPENAME" />
	<result property="exalias" column="EXALIAS" />
	<result property="exname" column="EXNAME" />
	<result property="createtime" column="CREATETIME" />
	<result property="lasttime" column="LASTTIME" />
	<result property="exdata" column="EXDATA" />
	<result property="sid" column="SID" />
</resultMap>
<sql id="columnsUser">
	u.ID, u.STATUS, u.SSQY, u.NAME, u.MOBILE, u.ACCOUNT, u.PASSWORD, 
	u.WORKCARD, u.SEX, u.AVATAR, u.IDCARD, u.EMAIL, u.PHONE, 
	u.ORGPID, u.ORGID, u.TYPE, u.TYPENAME, u.EXALIAS, u.EXNAME, u.CREATETIME, u.LASTTIME , u.EXDATA 
</sql>
<select id="getUserById" resultMap="resultUser">
	select <include refid="columnsUser" />, 0 as SID from DS_BASE_USER u where u.ID=#{id}
</select>
<select id="getUserByAccount" resultMap="resultUser">
	select <include refid="columnsUser" />, 0 as SID from DS_BASE_USER u where u.ACCOUNT=#{account}
</select>
<select id="getUserByOpenid" resultMap="resultUser">
	select <include refid="columnsUser" />, ub.ID as SID from DS_BASE_USER_BIND ub
	left join DS_BASE_USER u on u.ID=ub.USERID
	where ub.OPENID=#{openid} and ub.BINDID=#{bindid}
</select>
<select id="queryUserByOrgPid" resultMap="resultUser" parameterType="long">
	select <include refid="columnsUser" />, 0 as SID from DS_BASE_USER u 
	where <if test="orgpid &gt; 0"> u.ORGPID=#{orgpid} </if><if test="orgpid &lt;= 0"> u.ORGPID is null </if>
</select>
<select id="queryUserByOrgId" resultMap="resultUser" parameterType="long">
	select <include refid="columnsUser" />, 0 as SID from DS_BASE_USER u where u.ORGID=#{orgid}
</select>

</mapper>
